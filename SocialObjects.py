"""
PRISONER - Core Social Objects
==============================
This package contains abstract implementations of Social Objects. They provide
the common structure that any implementation should be able to handle, and
contain all common processing logic for core types.
"""

class InvalidTransformationLevelError(Exception):
	def __init__(self, value):
		self.level = value
	def __str__(self):
		return "Object can not be transformed to level: %s" % self.level

class SocialObject(object):
	""" SocialObjects are representations of social data, consumed and
	generated by a range of services and applications. Every SocialObject
	provides a small number of general attributes, with each implementation
	providing additional relevant attributes.
	SocialObjects must also provide transformation logic for each attribute,
	allowing each attribute to be sanitised to an appropriate level. 
	"""
	def __init__(self):
		self._author = None
		self._content = None
		self._displayName = None
		self._id = None
		self._published = None
		self._summary = None
		self._updated = None
		self._url = None
		self._location = None
		self._tags = None
		self._provider = None

	def transform_author(self, transformation, level):
		""" Applies sanitising transformations to the author attribute.
		This assumes the author is an instance of Person.
		
		:param transformation:
			"reduce" supported. Coarsens author object depending on
			value for level
		:type transformation: str
		:param level:
			first - reduce author's displayName to first name
			last - reduce author's displayName to last name
			initial - reduce author's displayName to initials of
			current names
		:type level: str
		:raises: InvalidTransformationLevelError
		"""
		levels = ["first","last","initials"]
		if level not in levels:
			raise InvalidTransformationLevelError(level)

		if level == "first":
			self.author.displayName = self.author.displayName.split(" ")[0]
		elif level == "last":
			split_name = self.author.displayName.split(" ") 
			self.author.displayName = split_name[len(split_name)-1]
		elif level == "initials":
			split_name = self.author.displayName.split(" ")
			initials = ""
			for word in split_name:
				initials = initials + word[0]
			self.author.displayName = initials

	@property
	def author(self):
		""" The person responsible for the creation of the object. For
		example, the person who wrote a post, uploaded a photo, etc.
		Should be an instance of Person.
		"""
		return self._author

	@author.setter
	def author(self, value):
		self._author = value

	@property
	def content(self):
		""" The main content of this object. Where possible, this should
		be plain text, or a URI to an external resource. Avoid packing binary data into
		this property as it may be difficult to sanitise and serialize.
		"""
		return self._content
	
	@content.setter
	def content(self, value):
		self._content = value

	@property
	def displayName(self):
		""" A natural language plain-text description of this object,
		without any additional markup. For example, the name of a location, or a
		person's full name. """
		return self._displayName
	
	@displayName.setter
	def displayName(self,value):
		self._displayName = value

	@property
	def provider(self):
		""" The name of the ServiceGateway which generated this object,
		or where it is intended to be published to. This must map to an available
		ServiceGateway, or not be set. """
		return self._provider

	@provider.setter
	def provider(self, value):
		self._provider = value


class Collection(SocialObject):
	""" Represents a generic collection of SocialObjects. It may contain any
	number and any combination of SocialObjects.
	"""
	def __init__(self):
		super(Collection,self).__init__()
		self._objects = None

	@property
	def objects(self):
		""" The collection of objects. Should be a list or SocialObjects
		instances. """
		return self._objects

	@objects.setter
	def objects(self, value):
		self._objects = value

class Comment(SocialObject):
	""" A textual response to another SocialObject. The base type should not
	be used for replying with rich content - video or images, etc. """
	def __init__(self):
		super(Comment,self).__init__()
		self._inReplyTo = None
	
	@property
	def inReplyTo(self):
		""" The SocialObject (or set of objects) this comment is in
		response to. """
		return self._inReplyTo

	@inReplyTo.setter
	def inReplyTo(self, value):
		self._inReplyTo = value

class Image(SocialObject):
	""" A graphical image, such as a photo. """
	def __init__(self):
		super(Image,self).__init__()
		self._fullImage = None

	@property
	def fullImage(self):
		""" A URI for a full-size version of this image. """
		return self._fullImage
	
	@fullImage.setter
	def fullImage(self, value):
		self._fullImage = value

class Person(SocialObject):
	""" A human actor involved in the exchange of SocialObjects. """
	def __init__(self):
		super(Person,self).__init__()
		self._image = None
	
	@property
	def image(self):
		""" An instance of Image used to visually represent this
		Person."""
		return self._image
	
	@image.setter
	def image(self,value):
		self._image = value

